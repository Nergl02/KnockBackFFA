package cz.nerkub.NerKubKnockBackFFA.Managers;

import cz.nerkub.NerKubKnockBackFFA.NerKubKnockBackFFA;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.Arrays;
import java.util.Objects;

public class InventoryMenuManager implements Listener {

	private final NerKubKnockBackFFA plugin;
	private final DatabaseManager databaseManager;
	private final DefaultInventoryManager defaultInventoryManager;

	public InventoryMenuManager(NerKubKnockBackFFA plugin, DatabaseManager databaseManager, DefaultInventoryManager defaultInventoryManager) {
		this.plugin = plugin;
		this.databaseManager = databaseManager;
		this.defaultInventoryManager = defaultInventoryManager;
	}

	public void openInventoryEditor(Player player) {
		// Vytvo≈ôen√≠ invent√°≈ôe s kapacitou 45 slot≈Ø
		Inventory inv = Bukkit.createInventory(null, 45, ChatColor.translateAlternateColorCodes('&',
				plugin.getMenu().getConfig().getString("inventory-editor-menu.title")));

		// Naƒçten√≠ hlavn√≠ho invent√°≈ôe a hotbaru z datab√°ze
		ItemStack[] mainInventory = databaseManager.loadMainInventory(player.getUniqueId());
		ItemStack[] hotbar = databaseManager.loadHotbar(player.getUniqueId());

		// Pokud nen√≠ invent√°≈ô ulo≈æen v datab√°zi, pou≈æij v√Ωchoz√≠ hodnoty (nap≈ô. pr√°zdn√Ω invent√°≈ô)
		if (mainInventory == null || Arrays.stream(mainInventory).allMatch(Objects::isNull)) {
			mainInventory = defaultInventoryManager.getDefaultMainInventory(); // V√Ωchoz√≠ invent√°≈ô
		}

		if (hotbar == null || Arrays.stream(hotbar).allMatch(Objects::isNull)) {
			hotbar = defaultInventoryManager.getDefaultHotbar(); // V√Ωchoz√≠ hotbar
		}

		// üî≥ 1. ≈ô√°dek - Hr√°ƒç≈Øv hotbar (sloty 36‚Äì44)
		for (int i = 0; i < 9; i++) {
			inv.setItem(36 + i, hotbar[i] != null ? hotbar[i] : new ItemStack(Material.AIR));
		}

		// üü¶ 2. ≈ô√°dek - Sklenƒõn√° p≈ôep√°≈æka (sloty 27‚Äì35)
		ItemStack glass = createGlassPane(ChatColor.translateAlternateColorCodes('&',
				plugin.getMenu().getConfig().getString("inventory-editor-menu.section-separator.display-name")));
		for (int i = 27; i < 36; i++) {
			inv.setItem(i, glass);
		}

		// üü¢ Ulo≈æit tlaƒç√≠tko (slot 30)
		inv.setItem(30, createButton(Material.valueOf(
				plugin.getMenu().getConfig().getString("inventory-editor-menu.buttons.save-inventory.material").toUpperCase()
		), ChatColor.translateAlternateColorCodes('&',
				plugin.getMenu().getConfig().getString("inventory-editor-menu.buttons.save-inventory.display-name"))));

		// üî¥ Resetovat tlaƒç√≠tko (slot 32)
		inv.setItem(32, createButton(Material.valueOf(
				plugin.getMenu().getConfig().getString("inventory-editor-menu.buttons.reset-inventory.material").toUpperCase()
		), ChatColor.translateAlternateColorCodes('&',
				plugin.getMenu().getConfig().getString("inventory-editor-menu.buttons.reset-inventory.display-name"))));

		// üî≤ 3.‚Äì5. ≈ô√°dek - Zbytek invent√°≈ôe (sloty 0‚Äì26)
		for (int i = 0; i < 27; i++) {
			inv.setItem(i, mainInventory[i] != null ? mainInventory[i] : new ItemStack(Material.AIR));
		}

		// üìú Otev≈ôen√≠ invent√°≈ôe hr√°ƒçi
		player.openInventory(inv);
	}


	// üíæ Ulo≈æen√≠ invent√°≈ôe
	public void savePlayerInventory(Player player, Inventory inv) {
		ItemStack[] mainInventory = new ItemStack[27];
		ItemStack[] hotbar = new ItemStack[9];

		// üî≤ Ulo≈æen√≠ hlavn√≠ho invent√°≈ôe (sloty 0‚Äì26)
		for (int i = 0; i < 27; i++) {
			mainInventory[i] = inv.getItem(i);
		}

		// üî≥ Ulo≈æen√≠ hotbaru (sloty 36‚Äì44)
		for (int i = 0; i < 9; i++) {
			hotbar[i] = inv.getItem(36 + i);
		}

		// üìÄ Ulo≈æen√≠ do datab√°ze
		databaseManager.savePlayerInventory(player.getUniqueId(), mainInventory, hotbar);
	}


	// üõë Kliknut√≠ v editoru
	@EventHandler
	public void onInventoryClick(InventoryClickEvent event) {
		String prefix = plugin.getMessages().getConfig().getString("prefix");
		if (!(event.getWhoClicked() instanceof Player player)) return;
		if (!event.getView().getTitle().equals(ChatColor.translateAlternateColorCodes('&',
				plugin.getMenu().getConfig().getString("inventory-editor-menu.title")))) return;

		int slot = event.getRawSlot();
		ItemStack clicked = event.getCurrentItem();

		// Zak√°zat manipulaci se sklem a tlaƒç√≠tky, kter√© nejsou urƒçeny pro interakci (pro panely skla)
		if (slot >= 27 && slot <= 35 && (slot != 30 && slot != 32)) {
			event.setCancelled(true);  // Zablokov√°n√≠ p≈ôetahov√°n√≠ na sklenƒõn√© panely
			return;
		}

		// Zak√°zat interakci s hr√°ƒçov√Ωm skuteƒçn√Ωm invent√°≈ôem (sloty 45 a v√Ω≈°)
		if (slot >= 45) {
			event.setCancelled(true);  // Zablokov√°n√≠ interakce s hr√°ƒçov√Ωm invent√°≈ôem
			return;
		}

		// Pokud bylo kliknuto na nƒõjak√Ω item
		if (clicked != null && clicked.hasItemMeta()) {

			// Ovƒõ≈ô√≠me, zda je item skuteƒçnƒõ emerald block nebo redstone block
			if (clicked.getType() == Material.valueOf(
					plugin.getMenu().getConfig().getString("inventory-editor-menu.buttons.save-inventory.material").toUpperCase())) {
				savePlayerInventory(player, event.getInventory()); // Ulo≈æen√≠ invent√°≈ôe
				player.sendMessage(ChatColor.translateAlternateColorCodes('&', prefix +
						plugin.getMessages().getConfig().getString("inventory-editor-menu.save-inventory")));
				// M√≠sto zav≈ôen√≠ invent√°≈ôe ho nech√°me otev≈ôen√Ω a pouze aktualizujeme polo≈æky
				updateInventory(player);
			} else if (clicked.getType() == Material.valueOf(
					plugin.getMenu().getConfig().getString("inventory-editor-menu.buttons.reset-inventory.material").toUpperCase())) {
				resetToDefault(player, event.getInventory());  // Reset na v√Ωchoz√≠ invent√°≈ô
				player.sendMessage(ChatColor.translateAlternateColorCodes('&', prefix +
						plugin.getMessages().getConfig().getString("inventory-editor-menu.reset-inventory")));
				// Opƒõt m√≠sto zav≈ôen√≠ jen znovu otev≈ôeme editor a resetujeme invent√°≈ô i tlaƒç√≠tka
				updateInventory(player);
			}
		}
	}


	// üîÑ Reset na v√Ωchoz√≠ invent√°≈ô
	private void resetToDefault(Player player, Inventory inv) {
		ItemStack[] defaultInv = defaultInventoryManager.getDefaultMainInventory();
		ItemStack[] defaultHotbar = defaultInventoryManager.getDefaultHotbar();

		// Resetuj hlavn√≠ invent√°≈ô (sloty 0‚Äì26)
		for (int i = 0; i < 27; i++) {
			inv.setItem(i, defaultInv[i] != null ? defaultInv[i] : new ItemStack(Material.AIR));
		}

		// Resetuj hotbar (sloty 36‚Äì44)
		for (int i = 0; i < 9; i++) {
			inv.setItem(36 + i, defaultHotbar[i] != null ? defaultHotbar[i] : new ItemStack(Material.AIR));
		}
		updateInventory(player);
	}

	private void updateInventory(Player player) {
		openInventoryEditor(player);
	}

	// üìè Ulo≈æen√≠ p≈ôi zav≈ôen√≠
	@EventHandler
	public void onInventoryClose(InventoryCloseEvent event) {
		if (!event.getView().getTitle().equals(ChatColor.translateAlternateColorCodes('&',
				plugin.getMenu().getConfig().getString("inventory-editor-menu.title")))) return;

		Player player = (Player) event.getPlayer();
		savePlayerInventory(player, event.getInventory());  // Zmƒõnƒõno na savePlayerInventory
	}



	// üåü Vytvo≈ôen√≠ tlaƒç√≠tek
	private ItemStack createButton(Material material, String name) {
		ItemStack button = new ItemStack(material);
		ItemMeta meta = button.getItemMeta();
		if (meta != null) {
			meta.setDisplayName(name);
			button.setItemMeta(meta);
		}
		return button;
	}

	// üü¶ Sklenƒõn√© panely
	private ItemStack createGlassPane(String name) {
		ItemStack pane = new ItemStack(Material.LIGHT_BLUE_STAINED_GLASS_PANE);
		ItemMeta meta = pane.getItemMeta();
		if (meta != null) {
			meta.setDisplayName(name);
			pane.setItemMeta(meta);
		}
		return pane;
	}
}
